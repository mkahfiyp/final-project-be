// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// START RISAL
model Selections {
  selection_id Int      @id @default(autoincrement())
  job_id       Int      @unique
  passingScore Int
  createAt     DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relasi
  job                 Jobs                 @relation(fields: [job_id], references: [job_id])
  selection_questions SelectionQuestions[]
  userSelections      UserSelection[]
}

model SelectionQuestions {
  selection_question_id Int               @id @default(autoincrement())
  selection_id          Int
  question              String
  option_A              String            @db.VarChar
  option_B              String            @db.VarChar
  option_C              String            @db.VarChar
  option_D              String            @db.VarChar
  correct_option        CorrectOptionEnum
  createAt              DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relasi
  selection   Selections   @relation(fields: [selection_id], references: [selection_id])
  userAnswers UserAnswer[]
}

model UserSelection {
  user_selection_id Int       @id @default(autoincrement())
  user_id           Int
  selection_id      Int
  score             Float? // nullable kalau belum selesai
  startedAt         DateTime  @default(now())
  completedAt       DateTime?

  // Relasi
  user        Users        @relation(fields: [user_id], references: [user_id])
  selection   Selections   @relation(fields: [selection_id], references: [selection_id])
  userAnswers UserAnswer[]
}

model UserAnswer {
  user_answer_id        Int      @id @default(autoincrement())
  user_selection_id     Int
  selection_question_id Int
  answer                String
  isCorrect             Boolean?

  // Relasi
  userSelection     UserSelection      @relation(fields: [user_selection_id], references: [user_selection_id])
  selectionQuestion SelectionQuestions @relation(fields: [selection_question_id], references: [selection_question_id])
}

model Interviews {
  interview_id   Int      @id @default(autoincrement())
  application_id Int      @unique
  schedule       DateTime
  createAt       DateTime @default(now())
  updatedAt      DateTime @updatedAt

  application Applications @relation(fields: [application_id], references: [application_id])
}

enum CorrectOptionEnum {
  A
  B
  C
  D
}

// END RISAL

// START FENDRI
model Users {
  user_id   Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  googleId  String?  @unique
  password  String?
  name      String
  role      Role
  isVerfied Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ///Relation
  companies        Companies?
  profiles         Profiles?
  education        Education[]
  experience       Experience[]
  job_save         JobSave[]
  applications     Applications[]
  user_subcription UserSubscriptions[]
  user_assessment  UserAssessments[]
  user_Company     UserCompanies[]
  user_selection   UserSelection[]
  blogs            Blog[]
}

enum Role {
  USER
  COMPANY
  DEVELOPER
}

model Companies {
  company_id      Int             @id @default(autoincrement())
  name            String
  email           String          @unique
  phone           String?
  description     String?
  website         String?
  profile_picture String?
  user_company    UserCompanies[]
  job             Jobs[]
  Users           Users?          @relation(fields: [user_id], references: [user_id])

  user_id Int @unique
}

model Profiles {
  profile_id      Int       @id @default(autoincrement())
  email           String    @unique
  name            String
  // education       String?
  phone           String?
  birthDate       DateTime?
  gender          Gender?
  address         String?
  profile_picture String?

  Users   Users? @relation(fields: [user_id], references: [user_id])
  user_id Int?   @unique
}

enum DegreeLevel {
  HIGH_SCHOOL
  DIPLOMA
  BACHELOR
  MASTER
  DOCTORATE
}

model Education {
  education_id Int         @id @default(autoincrement())
  university   String
  degree       DegreeLevel // tetap ada, user bebas nulis detail
  fieldOfStudy String
  startDate    DateTime
  endDate      DateTime?
  description  String?
  Users        Users?      @relation(fields: [user_id], references: [user_id])
  user_id      Int?
}

model Experience {
  experience_id Int       @id @default(autoincrement())
  name          String
  position      String
  startDate     DateTime //ini nanti dibalikan
  endDate       DateTime?
  description   String?
  Users         Users?    @relation(fields: [user_id], references: [user_id])
  user_id       Int?
}

enum Gender {
  MALE
  FEMALE
}

model Jobs {
  job_id            Int          @id @default(autoincrement())
  title             String
  slug              String       @unique
  description       String
  category          Category
  latitude          String
  longitude         String
  location          String
  salary            Int
  periodSalary      PeriodSalary
  currency          Currency
  job_type          JobType
  deletedAt         DateTime?
  preselection_test Boolean      @default(false)

  expiredAt    DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Companies    Companies?     @relation(fields: [company_id], references: [company_id])
  company_id   Int?
  job_save     JobSave[]
  selection    Selections?
  applications Applications[]
  skills       Skills[]       @relation("JobSkills")
}

model Skills {
  id   Int    @id @default(autoincrement())
  name String @unique
  jobs Jobs[] @relation("JobSkills")
}

enum PeriodSalary {
  MONTH
  YEAR
  DAY
  HOUR
}

enum Currency {
  RP
  DOLLAR
  EURO
}

enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  FREELANCE
  CONTRACT
  TEMPORARY
  REMOTE
  HYBRID
}

enum Category {
  SOFTWARE_ENGINEERING
  DATA_SCIENCE
  PRODUCT_MANAGEMENT
  DESIGN
  MARKETING
  SALES
  CUSTOMER_SERVICE
  FINANCE
  HUMAN_RESOURCES
  OPERATIONS
  EDUCATION
  HEALTHCARE
  MANUFACTURING
  CONSTRUCTION
  OTHERS
}

model JobSave {
  job_save_id Int @id @default(autoincrement())

  createdAd DateTime @default(now())
  updatedAt DateTime @updatedAt
  Users     Users?   @relation(fields: [user_id], references: [user_id])
  user_id   Int?
  Jobs      Jobs?    @relation(fields: [job_id], references: [job_id])
  job_id    Int?
}

model Applications {
  application_id  Int      @id @default(autoincrement())
  expected_salary Int
  cv              String
  status          Status
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Users     Users?      @relation(fields: [user_id], references: [user_id])
  user_id   Int?
  Jobs      Jobs?       @relation(fields: [job_id], references: [job_id])
  job_id    Int?
  interview Interviews?
}

enum Status {
  SUBMITTED // baru daftar
  IN_REVIEW // sedang diproses / screening
  INTERVIEW // dijadwalkan interview
  ACCEPTED // diterima
  REJECTED // ditolak
}

// END FENDRI

// START KAHFI
model UserAssessments {
  user_assessment_id Int      @id @default(autoincrement())
  assessment_id      Int
  user_id            Int
  score              Int
  date_taken         DateTime @default(now())
  createAt           DateTime @default(now())
  updatedAt          DateTime @updatedAt

  assessment SkillAssessments @relation(fields: [assessment_id], references: [assessment_id])
  user       Users            @relation(fields: [user_id], references: [user_id])

  assessment_certificates AssessmentCertificates[]
}

model SkillAssessments {
  assessment_id Int       @id @default(autoincrement())
  skill_name    String
  createAt      DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  assessment_questions AssessmentQuestions[]
  user_assessments     UserAssessments[]
}

model AssessmentCertificates {
  assessment_certificate_id Int      @id @default(autoincrement())
  user_assessment_id        Int
  certificate_code          String
  createAt                  DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  user_assessment UserAssessments @relation(fields: [user_assessment_id], references: [user_assessment_id])
}

model UserSubscriptions {
  user_subscription_id Int      @id @default(autoincrement())
  user_id              Int
  subscription_id      Int
  start_date           DateTime @default(now())
  end_date             DateTime
  createAt             DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user         Users         @relation(fields: [user_id], references: [user_id])
  subscription Subscriptions @relation(fields: [subscription_id], references: [subscription_id])
}

model Subscriptions {
  subscription_id Int      @id @default(autoincrement())
  name            String
  price           Int
  createAt        DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user_subscriptions UserSubscriptions[]
}

model Reviews {
  review_id                Int      @id @default(autoincrement())
  user_company_id          Int      @unique
  salary_estimate          Int
  rating_culture           Int
  rating_work_life_balance Int
  rating_facilities        Int
  rating_career            Int
  createAt                 DateTime @default(now())
  updatedAt                DateTime @updatedAt

  user_company UserCompanies @relation(fields: [user_company_id], references: [user_company_id])
}

model UserCompanies {
  user_company_id Int       @id @default(autoincrement())
  company_id      Int
  user_id         Int
  start_date      DateTime
  end_date        DateTime?
  createAt        DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  company Companies @relation(fields: [company_id], references: [company_id])
  user    Users     @relation(fields: [user_id], references: [user_id])
  reviews Reviews?
}

model AssessmentQuestions {
  assessment_question_id Int               @id @default(autoincrement())
  assessment_id          Int
  question               String
  option_a               String
  option_b               String
  option_c               String
  option_d               String
  correct_option         CorrectOptionEnum
  createAt               DateTime          @default(now())
  updatedAt              DateTime          @updatedAt

  assessment SkillAssessments @relation(fields: [assessment_id], references: [assessment_id])
}

// Blog model
model Blog {
  id             String   @id @default(cuid())
  title          String
  slug           String   @unique
  content        String   @db.Text
  excerpt        String?  @db.Text
  featured_image String?
  author_id      Int
  published      Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  author Users @relation(fields: [author_id], references: [user_id], onDelete: Cascade)

  @@map("blogs")
}

// END KAHFI
